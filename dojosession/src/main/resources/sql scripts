
create table lunch_schedule (
	id bigserial primary key,
	start_date timestamp not null,
	end_date timestamp not null
);

create table dish (
	id bigserial primary key,
	dish_name varchar(255) not null,
	is_vegan boolean);

alter table dish add column calories int;
alter table dish add column protein_id int references protein (id);
alter table dish drop column is_vegan;

create table protein (
	id serial primary key,
	protein_name varchar(255) unique not null
);

alter table protein add column is_vegan boolean;

create table description (
	id serial primary key,
	dish_id bigint references dish(id),
	main_protein_type bigint references protein (id),
	calorie bigint
);

-- track constrain

create table menu (
	id bigserial primary key,
	schedule_id bigint not null references lunch_schedule (id),
	menu_date timestamp not null,
	dish_id bigint references dish (id)
);

create table lunch_order (
	id bigserial primary key,
	menu_id bigint not null references menu (id),
	employee_id bigint not null references employee(id)
);


insert into lunch_schedule (start_date, end_date) values
	('2024-05-15 00:00:00', '2024-05-16 00:00:00');

-- Insert mock data into lunch_schedule table
INSERT INTO lunch_schedule (start_date, end_date) VALUES
    ('2024-03-25 12:00:00', '2024-03-25 13:00:00'),
    ('2024-03-26 12:00:00', '2024-03-26 13:00:00');

-- Insert mock data into dish table
INSERT INTO dish (dish_name) VALUES
    ('Spaghetti Carbonara'),
    ('Vegetable Stir-Fry'),
    ('Chicken Alfredo');

-- Insert mock data into menu table
INSERT INTO menu (schedule_id, menu_date, dish_id) VALUES
    (4, '2024-03-25 12:00:00', 2),
    (5, '2024-03-25 12:00:00', 2),
    (6, '2024-03-26 12:00:00', 1);

 INSERT INTO employee (name, email) VALUES
    ('John Doe', 'mailto:john@example.com'),
    ('Jane Smith', 'mailto:jane@example.com'),
    ('Michael Johnson', 'mailto:michael@example.com');

-- Insert mock data into lunch_order table
INSERT INTO lunch_order (menu_id, employee_id) VALUES
    (7, 1),
    (9, 2),
    (8, 3);


drop table description;
alter table protein rename column protein_name to type;

alter table lunch_schedule add column created_at timestamp;
alter table lunch_schedule add column updated_at timestamp;

create table menu_dish (
	id bigserial primary key,
	menu_id bigint not null references menu (id),
	dish_id bigint not null references dish (id)
);

alter table menu drop column dish_id;

alter table dish add column created_at timestamp;
alter table dish add column updated_at timestamp;

alter table menu add column created_at timestamp;
alter table menu add column updated_at timestamp;

alter table lunch_order drop column menu_id;

alter table lunch_order add column menu_dish_id bigint references menu_dish(id);

alter table menu_dish add column created_at timestamp;
alter table menu_dish add column updated_at timestamp;

alter table protein add column created_at timestamp;
alter table protein add column updated_at timestamp;

alter table lunch_order add column created_at timestamp;
alter table lunch_order add column updated_at timestamp;


SELECT m.menu_date ,dept.department_name,
       d.dish_name,
       COUNT(lo.menu_dish_id)
FROM lunch_order lo
RIGHT JOIN menu_dish md ON lo.menu_dish_id = md.id
LEFT JOIN dish d ON md.dish_id = d.id
LEFT JOIN employee e ON lo.employee_id = e.id
LEFT JOIN department dept ON e.department_id = dept.id
left JOIN menu m ON md.menu_id = m.id
JOIN lunch_schedule ls ON m.schedule_id = ls.id
WHERE ls.start_date >= date_trunc('week', current_date) + interval '1' day
GROUP BY dept.department_name, md.dish_id, d.dish_name, m.menu_date
ORDER BY m.menu_date asc, dept.department_name ASC, d.dish_name asc;

drop table project cascade;

drop table "assignment" cascade;

SHOW datestyle;

ALTER TABLE menu
ADD CONSTRAINT unique_date UNIQUE (menu_date);

alter table lunch_schedule
add column order_deadline timestamp;


SELECT m.menu_date, dept.department_name, d.dish_name, COUNT(lo.menu_dish_id)
FROM lunch_order lo
RIGHT JOIN menu_dish md ON lo.menu_dish_id = md.id
LEFT JOIN dish d ON md.dish_id = d.id
LEFT JOIN employee e ON lo.employee_id = e.id
LEFT JOIN department dept ON e.department_id = dept.id
LEFT JOIN (
    SELECT * FROM menu WHERE schedule_id IN (
        SELECT id FROM lunch_schedule
        WHERE start_date >= date_trunc('week', current_date) + interval '1' day
        ORDER BY start_date LIMIT 1
    )
) m ON md.menu_id = m.id
JOIN lunch_schedule ls ON m.schedule_id = ls.id
WHERE ls.start_date >= date_trunc('week', current_date) + interval '1' day
GROUP BY dept.department_name, md.dish_id, d.dish_name, m.menu_date
ORDER BY m.menu_date ASC, dept.department_name ASC, d.dish_name ASC;

alter table employee add column role varchar(10);

-- Step 1: Create the ENUM type
CREATE TYPE status_enum AS ENUM ('INACTIVE', 'ACTIVE');

alter table employee drop column status;

-- Step 2: Alter the status column to use the ENUM type
ALTER TABLE employee
ADD COLUMN status status_enum;

truncate table employee cascade;

INSERT INTO employee (date_of_birth, email, phone, first_name, gender, last_name, middle_name, salary, department_id, password, status, role)
VALUES ('1990-05-15', 'employee1@example.com', '123456789', 'John', 'MALE', 'Doe', NULL, 50000, 1, 'password1', 'ACTIVE', 'ROLE_USER');
INSERT INTO employee (date_of_birth, email, phone, first_name, gender, last_name, middle_name, salary, department_id, password, status, role)
VALUES ('1985-08-20', 'employee2@example.com', '987654321', 'Jane', 'FEMALE', 'Smith', NULL, 60000, 2, 'password2', 'ACTIVE', 'ROLE_USER');
INSERT INTO employee (date_of_birth, email, phone, first_name, gender, last_name, middle_name, salary, department_id, password, status, role)
VALUES ('1978-03-10', 'employee3@example.com', '456789123', 'Michael', 'MALE', 'Johnson', 'Anthony', 70000, 1, 'password3', 'INACTIVE', 'ROLE_USER');
INSERT INTO employee (date_of_birth, email, phone, first_name, gender, last_name, middle_name, salary, department_id, password, status, role)
VALUES ('1995-11-25', 'employee4@example.com', '654123789', 'Emily', 'FEMALE', 'Brown', NULL, 55000, 3, 'password4', 'ACTIVE', 'ROLE_ADMIN');
INSERT INTO employee (date_of_birth, email, phone, first_name, gender, last_name, middle_name, salary, department_id, password, status, role)
VALUES ('1982-07-02', 'employee5@example.com', '789321654', 'David', 'MALE', 'Williams', 'Robert', 65000, 2, 'password5', 'ACTIVE', 'ROLE_USER');

select d.dish_name, m.menu_date, ls from lunch_schedule ls
join menu m on m.schedule_id = ls.id
join menu_dish md on md.menu_id = m.id
join dish d on d.id = md.dish_id
WHERE start_date >= date_trunc('week', current_date) + interval '1' day
ORDER BY start_date asc;